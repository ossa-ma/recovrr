"""Base notification class."""

from abc import ABC, abstractmethod
from typing import Dict, Any


class BaseNotifier(ABC):
    """Abstract base class for notification services."""
    
    def __init__(self, name: str):
        """Initialize the notifier.
        
        Args:
            name: Name of the notification service
        """
        self.name = name
        
    @abstractmethod
    async def send_match_notification(
        self,
        recipient: str,
        search_profile: Dict[str, Any],
        listing: Dict[str, Any],
        analysis_result: Dict[str, Any]
    ) -> bool:
        """Send a notification about a potential match.
        
        Args:
            recipient: Recipient identifier (email, phone, etc.)
            search_profile: Search profile that matched
            listing: Marketplace listing information
            analysis_result: AI analysis results
            
        Returns:
            True if notification was sent successfully
        """
        pass
        
    @abstractmethod
    async def send_system_notification(
        self,
        recipient: str,
        subject: str,
        message: str
    ) -> bool:
        """Send a system notification.
        
        Args:
            recipient: Recipient identifier
            subject: Notification subject
            message: Notification message
            
        Returns:
            True if notification was sent successfully
        """
        pass
        
    def format_match_message(
        self,
        search_profile: Dict[str, Any],
        listing: Dict[str, Any],
        analysis_result: Dict[str, Any]
    ) -> Dict[str, str]:
        """Format the match notification message.
        
        Args:
            search_profile: Search profile information
            listing: Listing information
            analysis_result: Analysis results
            
        Returns:
            Dictionary with 'subject' and 'body' keys
        """
        match_score = analysis_result.get('match_score', 0)
        confidence = analysis_result.get('confidence_level', 'unknown')
        recommendation = analysis_result.get('recommendation', 'investigate')
        
        # Create subject line
        priority_text = "üö® HIGH PRIORITY" if recommendation == "high_priority" else "‚ö†Ô∏è POTENTIAL MATCH"
        subject = f"{priority_text}: {search_profile.get('make', 'Item')} {search_profile.get('model', '')}"
        
        # Create message body
        body = f"""
{priority_text} FOUND

A potential match for your stolen item has been detected!

STOLEN ITEM DETAILS:
‚Ä¢ Make: {search_profile.get('make', 'Unknown')}
‚Ä¢ Model: {search_profile.get('model', 'Unknown')}
‚Ä¢ Color: {search_profile.get('color', 'Unknown')}
‚Ä¢ Size: {search_profile.get('size', 'Unknown')}

MARKETPLACE LISTING:
‚Ä¢ Title: {listing.get('title', 'No title')}
‚Ä¢ Price: ${listing.get('price', 'Unknown')}
‚Ä¢ Location: {listing.get('location', 'Unknown')}
‚Ä¢ Marketplace: {listing.get('marketplace', 'Unknown')}
‚Ä¢ URL: {listing.get('url', 'No URL')}

AI ANALYSIS:
‚Ä¢ Match Score: {match_score}/10
‚Ä¢ Confidence: {confidence.upper()}
‚Ä¢ Recommendation: {recommendation.upper()}

REASONING:
{analysis_result.get('reasoning', 'No reasoning provided')}

KEY INDICATORS:
{chr(10).join([f"‚Ä¢ {indicator}" for indicator in analysis_result.get('key_indicators', [])])}

NEXT STEPS:
1. Review the listing immediately: {listing.get('url', 'No URL')}
2. Contact local authorities if this appears to be your item
3. Do NOT contact the seller directly - work with police

---
This alert was generated by Recovrr AI monitoring system.
Report false positives to help improve accuracy.
""".strip()
        
        return {
            'subject': subject,
            'body': body
        }
